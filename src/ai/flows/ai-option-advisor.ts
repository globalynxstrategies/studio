'use server';

/**
 * @fileOverview Provides timely trade recommendations generated by AI using the Option Clock.
 *
 * - aiOptionAdvisor - A function that returns trade recommendations.
 * - AIOptionAdvisorInput - The input type for the aiOptionAdvisor function.
 * - AIOptionAdvisorOutput - The return type for the aiOptionAdvisor function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AIOptionAdvisorInputSchema = z.object({
  tradingWindow: z.string().describe('The current trading window of the Option Clock (e.g., Early, Peak, Late).'),
  marketConditions: z.string().describe('A description of current market conditions (e.g., Bullish, Bearish, Sideways).'),
});
export type AIOptionAdvisorInput = z.infer<typeof AIOptionAdvisorInputSchema>;

const AIOptionAdvisorOutputSchema = z.object({
  recommendation: z.string().describe('A trade recommendation based on the Option Clock and market conditions.'),
  rationale: z.string().describe('The rationale behind the trade recommendation.'),
});
export type AIOptionAdvisorOutput = z.infer<typeof AIOptionAdvisorOutputSchema>;

export async function aiOptionAdvisor(input: AIOptionAdvisorInput): Promise<AIOptionAdvisorOutput> {
  return aiOptionAdvisorFlow(input);
}

const prompt = ai.definePrompt({
  name: 'aiOptionAdvisorPrompt',
  input: {schema: AIOptionAdvisorInputSchema},
  output: {schema: AIOptionAdvisorOutputSchema},
  prompt: `You are an AI Option Advisor that uses the Option Clock to recommend timely trades.

The current trading window is: {{{tradingWindow}}}
The current market conditions are: {{{marketConditions}}}

Based on this information, provide a trade recommendation and the rationale behind it.
`,
});

const aiOptionAdvisorFlow = ai.defineFlow(
  {
    name: 'aiOptionAdvisorFlow',
    inputSchema: AIOptionAdvisorInputSchema,
    outputSchema: AIOptionAdvisorOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
